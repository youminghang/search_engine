// Code generated by Kitex v0.8.0. DO NOT EDIT.

package user

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	user "github/youminghang/search_engine/search_engine_srv/user_srv/proto/kitex_gen/user"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceInfo
}

var userServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "User"
	handlerType := (*user.User)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetUserList":   kitex.NewMethodInfo(getUserListHandler, newGetUserListArgs, newGetUserListResult, false),
		"GetUserById":   kitex.NewMethodInfo(getUserByIdHandler, newGetUserByIdArgs, newGetUserByIdResult, false),
		"CreateUser":    kitex.NewMethodInfo(createUserHandler, newCreateUserArgs, newCreateUserResult, false),
		"UpdateUser":    kitex.NewMethodInfo(updateUserHandler, newUpdateUserArgs, newUpdateUserResult, false),
		"CheckPassWord": kitex.NewMethodInfo(checkPassWordHandler, newCheckPassWordArgs, newCheckPassWordResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "",
		"ServiceFilePath": ``,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func getUserListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserInfoFilter)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.User).GetUserList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserListArgs:
		success, err := handler.(user.User).GetUserList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserListResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserListArgs() interface{} {
	return &GetUserListArgs{}
}

func newGetUserListResult() interface{} {
	return &GetUserListResult{}
}

type GetUserListArgs struct {
	Req *user.UserInfoFilter
}

func (p *GetUserListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserListArgs) Unmarshal(in []byte) error {
	msg := new(user.UserInfoFilter)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserListArgs_Req_DEFAULT *user.UserInfoFilter

func (p *GetUserListArgs) GetReq() *user.UserInfoFilter {
	if !p.IsSetReq() {
		return GetUserListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserListResult struct {
	Success *user.UserListResponse
}

var GetUserListResult_Success_DEFAULT *user.UserListResponse

func (p *GetUserListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserListResult) Unmarshal(in []byte) error {
	msg := new(user.UserListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserListResult) GetSuccess() *user.UserListResponse {
	if !p.IsSetSuccess() {
		return GetUserListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserListResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserListResponse)
}

func (p *GetUserListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserListResult) GetResult() interface{} {
	return p.Success
}

func getUserByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.IdRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.User).GetUserById(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserByIdArgs:
		success, err := handler.(user.User).GetUserById(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserByIdResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserByIdArgs() interface{} {
	return &GetUserByIdArgs{}
}

func newGetUserByIdResult() interface{} {
	return &GetUserByIdResult{}
}

type GetUserByIdArgs struct {
	Req *user.IdRequest
}

func (p *GetUserByIdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserByIdArgs) Unmarshal(in []byte) error {
	msg := new(user.IdRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserByIdArgs_Req_DEFAULT *user.IdRequest

func (p *GetUserByIdArgs) GetReq() *user.IdRequest {
	if !p.IsSetReq() {
		return GetUserByIdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserByIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserByIdArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserByIdResult struct {
	Success *user.UserInfoResponse
}

var GetUserByIdResult_Success_DEFAULT *user.UserInfoResponse

func (p *GetUserByIdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserByIdResult) Unmarshal(in []byte) error {
	msg := new(user.UserInfoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserByIdResult) GetSuccess() *user.UserInfoResponse {
	if !p.IsSetSuccess() {
		return GetUserByIdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserInfoResponse)
}

func (p *GetUserByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserByIdResult) GetResult() interface{} {
	return p.Success
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.CreateUserInfo)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.User).CreateUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateUserArgs:
		success, err := handler.(user.User).CreateUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateUserResult)
		realResult.Success = success
	}
	return nil
}
func newCreateUserArgs() interface{} {
	return &CreateUserArgs{}
}

func newCreateUserResult() interface{} {
	return &CreateUserResult{}
}

type CreateUserArgs struct {
	Req *user.CreateUserInfo
}

func (p *CreateUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateUserArgs) Unmarshal(in []byte) error {
	msg := new(user.CreateUserInfo)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateUserArgs_Req_DEFAULT *user.CreateUserInfo

func (p *CreateUserArgs) GetReq() *user.CreateUserInfo {
	if !p.IsSetReq() {
		return CreateUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateUserResult struct {
	Success *user.UserInfoResponse
}

var CreateUserResult_Success_DEFAULT *user.UserInfoResponse

func (p *CreateUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateUserResult) Unmarshal(in []byte) error {
	msg := new(user.UserInfoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateUserResult) GetSuccess() *user.UserInfoResponse {
	if !p.IsSetSuccess() {
		return CreateUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserInfoResponse)
}

func (p *CreateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateUserResult) GetResult() interface{} {
	return p.Success
}

func updateUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UpdateUserInfo)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.User).UpdateUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateUserArgs:
		success, err := handler.(user.User).UpdateUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateUserResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateUserArgs() interface{} {
	return &UpdateUserArgs{}
}

func newUpdateUserResult() interface{} {
	return &UpdateUserResult{}
}

type UpdateUserArgs struct {
	Req *user.UpdateUserInfo
}

func (p *UpdateUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateUserArgs) Unmarshal(in []byte) error {
	msg := new(user.UpdateUserInfo)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateUserArgs_Req_DEFAULT *user.UpdateUserInfo

func (p *UpdateUserArgs) GetReq() *user.UpdateUserInfo {
	if !p.IsSetReq() {
		return UpdateUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateUserResult struct {
	Success *emptypb.Empty
}

var UpdateUserResult_Success_DEFAULT *emptypb.Empty

func (p *UpdateUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateUserResult) Unmarshal(in []byte) error {
	msg := new(emptypb.Empty)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateUserResult) GetSuccess() *emptypb.Empty {
	if !p.IsSetSuccess() {
		return UpdateUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*emptypb.Empty)
}

func (p *UpdateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateUserResult) GetResult() interface{} {
	return p.Success
}

func checkPassWordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.PasswordInfo)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.User).CheckPassWord(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CheckPassWordArgs:
		success, err := handler.(user.User).CheckPassWord(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CheckPassWordResult)
		realResult.Success = success
	}
	return nil
}
func newCheckPassWordArgs() interface{} {
	return &CheckPassWordArgs{}
}

func newCheckPassWordResult() interface{} {
	return &CheckPassWordResult{}
}

type CheckPassWordArgs struct {
	Req *user.PasswordInfo
}

func (p *CheckPassWordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CheckPassWordArgs) Unmarshal(in []byte) error {
	msg := new(user.PasswordInfo)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CheckPassWordArgs_Req_DEFAULT *user.PasswordInfo

func (p *CheckPassWordArgs) GetReq() *user.PasswordInfo {
	if !p.IsSetReq() {
		return CheckPassWordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CheckPassWordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CheckPassWordArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CheckPassWordResult struct {
	Success *user.CheckResponse
}

var CheckPassWordResult_Success_DEFAULT *user.CheckResponse

func (p *CheckPassWordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CheckPassWordResult) Unmarshal(in []byte) error {
	msg := new(user.CheckResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CheckPassWordResult) GetSuccess() *user.CheckResponse {
	if !p.IsSetSuccess() {
		return CheckPassWordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CheckPassWordResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.CheckResponse)
}

func (p *CheckPassWordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckPassWordResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetUserList(ctx context.Context, Req *user.UserInfoFilter) (r *user.UserListResponse, err error) {
	var _args GetUserListArgs
	_args.Req = Req
	var _result GetUserListResult
	if err = p.c.Call(ctx, "GetUserList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserById(ctx context.Context, Req *user.IdRequest) (r *user.UserInfoResponse, err error) {
	var _args GetUserByIdArgs
	_args.Req = Req
	var _result GetUserByIdResult
	if err = p.c.Call(ctx, "GetUserById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateUser(ctx context.Context, Req *user.CreateUserInfo) (r *user.UserInfoResponse, err error) {
	var _args CreateUserArgs
	_args.Req = Req
	var _result CreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUser(ctx context.Context, Req *user.UpdateUserInfo) (r *emptypb.Empty, err error) {
	var _args UpdateUserArgs
	_args.Req = Req
	var _result UpdateUserResult
	if err = p.c.Call(ctx, "UpdateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckPassWord(ctx context.Context, Req *user.PasswordInfo) (r *user.CheckResponse, err error) {
	var _args CheckPassWordArgs
	_args.Req = Req
	var _result CheckPassWordResult
	if err = p.c.Call(ctx, "CheckPassWord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
